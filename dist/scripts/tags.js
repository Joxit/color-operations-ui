/*!
 * color-operation-ui
 * Copyright (C) 2016-2017  Jones Magloire @Joxit
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
riot.tag2("app",'<header> <material-navbar> <div class="title">Color Operations UI</div> </material-navbar> <material-tabs useline="true" tabs="{this.tabs}" tabchanged="{this.tabChanged}"></material-tabs> </header> <main> <converter></converter> <unary-functions></unary-functions> <binary-functions></binary-functions> </main> <footer> <material-footer> <a class="material-footer-logo" href="https://joxit.github.io/color-operations-ui/">Color Operations UI</a> <ul class="material-footer-link-list"> <li> <a href="https://github.com/Joxit/color-operations-ui">Contribute on GitHub</a> </li> <li> <a href="https://github.com/Joxit/color-operations-ui/blob/master/LICENSE">Privacy &amp; Terms</a> </li> </ul> </material-footer> </footer>',"","",function(r){var e=this;this.tabs=[{title:"Converter",tag:"converter"},{title:"Unary Functions",tag:"unary-functions"},{title:"Binary Functions",tag:"binary-functions"}],this.tabChanged=function(r){e.tabs.forEach(function(t){r.tag===t.tag?e.tags[t.tag].update({hide:!1}):e.tags[t.tag].update({hide:!0})})},this.on("mount",function(){this.tabChanged({tag:"converter"})})}),riot.tag2("binary-functions",'<material-card ref="first-color-card"> <material-input ref="color" placeholder="First color" valid="{colorConverter.rgb.isValid}"></material-input> </material-card> <material-card ref="second-color-card"> <material-input ref="color" placeholder="Second color" valid="{colorConverter.rgb.isValid}"></material-input> </material-card> <material-card ref="function-card"> <material-input ref="percent" placeholder="Function percent" valid=""></material-input> <select ref="function"> <option value="mix">mix</option> </select> <material-input ref="result" placeholder="Function result" valid=""></material-input> </material-card>',"",'hide="{hide}"',function(r){this.on("mount",function(){var r=this,e=this.refs["first-color-card"],t=this.refs["second-color-card"],o=this.refs["function-card"];e.refs.color.card=e,t.refs.color.card=t,e.refs.color.validate=t.refs.color.validate=function(r){return!r||0==r.length||(this.typeValue=colorConverter.getStringTypeAndValue(r),void 0!==this.typeValue)},e.refs.color.on("valueChanged",r.onColorChange(e,t,o)),t.refs.color.on("valueChanged",r.onColorChange(e,t,o)),o.refs.function.onchange=o.refs.function.onclick=o.refs.function.onkeyup=r.onColorChange(e,t,o),o.refs.percent.on("valueChanged",r.onColorChange(e,t,o))}),this.onColorChange=function(r,e,t){return function(o){if(!this.error&&o&&o.length>0||o instanceof Event){var n=t.refs.percent.value,a=r.refs.color.typeValue,i=e.refs.color.typeValue;if("color"===this.name&&(this.card.root.style.backgroundColor=colorConverter[this.typeValue.type].toString(this.typeValue.value)),a&&i&&!t.refs.percent.error&&n.length>0){var l=a.value,c=i.value;"rgba"!==a.type&&(l=colorConverter[a.type].rgba(a.value)),"rgba"!==i.type&&(c=colorConverter[i.type].rgba(i.value)),t.refs.result.value=t.root.style.backgroundColor=colorConverter.rgba.toString(colorFunctions[t.refs.function.value](l,c,parseFloat(n))),t.refs.result.update()}}}}}),riot.tag2("converter",'<material-card> <material-input ref="hex" placeholder="Hexadecimal" valid="{colorConverter.hex.isValid}"></material-input> <material-input ref="rgb" placeholder="Red Green Blue" valid="{colorConverter.rgb.isValid}"></material-input> <material-input ref="hsl" placeholder="Hue Saturation Light" valid="{colorConverter.hsl.isValid}"></material-input> </material-card>',"",'hide="{hide}"',function(r){this.on("mount",function(){var r=this,e=this.tags["material-card"];e.refs.hex.validate=function(r){return!r||0==r.length||colorConverter.hex.isValid(r)},e.refs.rgb.validate=function(r){return!r||0==r.length||colorConverter.rgb.isValid(r)},e.refs.hsl.validate=function(r){return!r||0==r.length||colorConverter.hsl.isValid(r)},e.refs.hex.on("valueChanged",r.onInputChange(e,"hex")),e.refs.rgb.on("valueChanged",r.onInputChange(e,"rgb")),e.refs.hsl.on("valueChanged",r.onInputChange(e,"hsl"))}),this.onInputChange=function(r,e){var t={hex:{a:"rgb",b:"hsl",fromString:colorConverter.hex.fromString},rgb:{a:"hex",b:"hsl",fromString:function(r){return colorConverter.rgb.fromString(r)||colorConverter.rgba.fromString(r)}},hsl:{a:"hex",b:"rgb",fromString:colorConverter.hsl.fromString}};return function(o){if(!this.error&&o&&o.length>0){var n=t[e].fromString(o);["a","b"].forEach(function(o){r.refs[t[e][o]].value=colorConverter[t[e][o]].toString(colorConverter[e][t[e][o]](n)),r.refs[t[e][o]].update(),r.refs[t[e][o]].isValid(!0)}),r.root.style.backgroundColor=colorConverter[e].toString(n)}}}}),riot.tag2("unary-functions",'<material-card ref="color-card"> <material-input ref="color" placeholder="Function color" valid="{colorConverter.rgb.isValid}"></material-input> </material-card> <material-card ref="function-card"> <material-input ref="percent" placeholder="Function percent" valid="/^[0-9]+(\\.[0-9]+)?%?$|^$/"></material-input> <select ref="function"> <option value="saturate">saturate</option> <option value="desaturate">desaturate</option> <option value="lighten">lighten</option> <option value="darken">darken</option> <option value="fade">fadein</option> <option value="fadeout">fadeout</option> <option value="spin">spin</option> </select> <material-input ref="result" placeholder="Function result" valid="" disabled="true"></material-input> </material-card>',"",'hide="{hide}"',function(r){[{f:"desaturate",n:"saturate"},{f:"darken",n:"lighten"},{f:"fadeout",n:"fade"}].forEach(function(r){colorFunctions[r.f]=function(e,t){return colorFunctions[r.n](e,-t)}}),this.on("mount",function(){var r=this,e=this.refs["color-card"],t=this.refs["function-card"];e.refs.color.validate=function(r){return!r||0==r.length||(this.typeValue=colorConverter.getStringTypeAndValue(r),void 0!==this.typeValue)},e.refs.color.on("valueChanged",r.onColorChange(e,t)),t.refs.function.onchange=t.refs.function.onclick=t.refs.function.onkeyup=r.onColorChange(e,t),t.refs.percent.on("valueChanged",r.onColorChange(e,t))}),this.onColorChange=function(r,e){return function(t){if(!this.error&&t&&t.length>0||t instanceof Event){var o=e.refs.percent.value,n=r.refs.color.typeValue;if("color"===this.name&&(r.root.style.backgroundColor=colorConverter[n.type].toString(n.value)),n&&!e.refs.percent.error&&o.length>0){var a=n.value;"rgba"!==n.type&&(a=colorConverter[n.type].rgba(n.value)),e.refs.result.value=e.root.style.backgroundColor=colorConverter.rgba.toString(colorFunctions[e.refs.function.value](a,parseFloat(o))),e.refs.result.update()}}}}});